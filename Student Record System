#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

struct Student {
    int id;
    char name[50];
    int marks[5];
    float average;
};

// Helper function to remove newline
void removeNewline(char *str) {
    size_t len = strlen(str);
    if (len > 0 && str[len - 1] == '\n')
        str[len - 1] = '\0';
}

// Check if string is all digits
int isValidInteger(char *str) {
    if (*str == '\0') return 0;
    for (int i = 0; str[i]; i++) {
        if (!isdigit(str[i])) return 0;
    }
    return 1;
}

// Check if name is valid (only letters and spaces)
int isValidName(char *str) {
    if (strlen(str) == 0) return 0;
    for (int i = 0; str[i]; i++) {
        if (!isalpha(str[i]) && str[i] != ' ') return 0;
    }
    return 1;
}

// Input students
void inputStudents(struct Student s[], int n) {
    for (int i = 0; i < n; i++) {
        printf("\nEnter details for Student %d:\n", i + 1);

        // ID
        while (1) {
            printf("ID: ");
            if (scanf("%d", &s[i].id) == 1 && s[i].id > 0) break;
            else {
                printf("Invalid input. Please enter a valid positive integer ID.\n");
                while (getchar() != '\n');
            }
        }
        while (getchar() != '\n');

        // Name
        while (1) {
            printf("Name: ");
            fgets(s[i].name, sizeof(s[i].name), stdin);
            removeNewline(s[i].name);
            if (isValidName(s[i].name)) break;
            else printf("Invalid name. Use only letters and spaces. Try again.\n");
        }

        // Marks
        char markStr[10];
        printf("Enter 5 marks (0â€“100):\n");
        for (int j = 0; j < 5; j++) {
            while (1) {
                printf("Mark %d: ", j + 1);
                fgets(markStr, sizeof(markStr), stdin);
                removeNewline(markStr);

                if (!isValidInteger(markStr)) {
                    printf("Invalid input. Enter a number between 0 and 100.\n");
                    continue;
                }

                int mark = atoi(markStr);
                if (mark >= 0 && mark <= 100) {
                    s[i].marks[j] = mark;
                    break;
                } else {
                    printf("Mark out of range. Please enter between 0 and 100.\n");
                }
            }
        }
    }
}

// Average
void calculateAverage(struct Student *s) {
    int sum = 0;
    for (int i = 0; i < 5; i++) {
        sum += s->marks[i];
    }
    s->average = sum / 5.0;
}

// Topper
void displayTopper(struct Student s[], int n) {
    int topperIndex = 0;
    float highestAverage = s[0].average;

    for (int i = 1; i < n; i++) {
        if (s[i].average > highestAverage) {
            highestAverage = s[i].average;
            topperIndex = i;
        }
    }

    printf("\nTopper Details:\n");
    printf("ID: %d\n", s[topperIndex].id);
    printf("Name: %s\n", s[topperIndex].name);
    printf("Marks: ");
    for (int j = 0; j < 5; j++) {
        printf("%d ", s[topperIndex].marks[j]);
    }
    printf("\nAverage: %.2f\n", s[topperIndex].average);
}

int main() {
    int n = 5;
    struct Student students[n];

    inputStudents(students, n);

    for (int i = 0; i < n; i++) {
        calculateAverage(&students[i]);
    }

    displayTopper(students, n);

    return 0;
}
